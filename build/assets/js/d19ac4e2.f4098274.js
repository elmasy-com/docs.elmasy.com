"use strict";(self.webpackChunkwiki_elmasy_com=self.webpackChunkwiki_elmasy_com||[]).push([[566],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),f=c(n),d=i,m=f["".concat(s,".").concat(d)]||f[d]||u[d]||a;return n?r.createElement(m,l(l({ref:t},p),{},{components:n})):r.createElement(m,l({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[f]="string"==typeof e?e:i,l[1]=o;for(var c=2;c<a;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4490:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const a={title:"nftables",keywords:["nftables","firewall"],description:"nftables is a subsystem of the Linux kernel providing filtering and classification of network packets/datagrams/frames.",tags:["firewall"]},l="nftable",o={unversionedId:"guides/nftables",id:"guides/nftables",title:"nftables",description:"nftables is a subsystem of the Linux kernel providing filtering and classification of network packets/datagrams/frames.",source:"@site/docs/guides/nftables.md",sourceDirName:"guides",slug:"/guides/nftables",permalink:"/guides/nftables",draft:!1,editUrl:"https://github.com/elmasy-com/docs.elmasy.com/tree/main/docs/guides/nftables.md",tags:[{label:"firewall",permalink:"/tags/firewall"}],version:"current",frontMatter:{title:"nftables",keywords:["nftables","firewall"],description:"nftables is a subsystem of the Linux kernel providing filtering and classification of network packets/datagrams/frames.",tags:["firewall"]},sidebar:"docSidebar",previous:{title:"mdadm",permalink:"/guides/mdadm"},next:{title:"Nginx",permalink:"/guides/nginx"}},s={},c=[{value:"Simple stateful firewall",id:"simple-stateful-firewall",level:2},{value:"Rules",id:"rules",level:2}],p={toc:c},f="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(f,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"nftable"},"nftable"),(0,i.kt)("h2",{id:"simple-stateful-firewall"},"Simple stateful firewall"),(0,i.kt)("p",null,"Simple firewall for a basic webserver."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"#!/usr/sbin/nft -f\n\nflush rules\n\ntable inet filter {\n\n    chain inbound_ipv4 {\n        icmp type echo-request limit rate 5/second accept\n    }\n\n    chain inbound_ipv6 {\n        icmpv6 type { nd-neighbor-solicit, nd-router-advert, nd-neighbor-advert } accept\n        icmpv6 type echo-request limit rate 5/second accept\n    }\n\n    chain input {\n        type filter hook input priority 0; policy drop;\n        ct state { established, related } accept\n        iifname lo accept\n        meta protocol vmap { ip : jump inbound_ipv4, ip6 : jump inbound_ipv6 }\n        tcp dport 22 accept\n        tcp dport 80 accept\n        tcp dport 443 accept\n        reject\n    }\n\n    chain forward {\n        type filter hook forward priority 0; policy drop;\n    }\n\n    chain output {\n        type filter hook output priority 0;\n    }\n}\n")),(0,i.kt)("h2",{id:"rules"},"Rules"),(0,i.kt)("p",null,"Filter by source IP address and destination port:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"ip saddr 1.1.1.1 tcp dport 80 accept\n")))}u.isMDXComponent=!0}}]);