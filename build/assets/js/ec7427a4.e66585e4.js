"use strict";(self.webpackChunkwiki_elmasy_com=self.webpackChunkwiki_elmasy_com||[]).push([[838],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),s=c(n),g=a,m=s["".concat(l,".").concat(g)]||s[g]||d[g]||i;return n?r.createElement(m,p(p({ref:t},u),{},{components:n})):r.createElement(m,p({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,p=new Array(i);p[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[s]="string"==typeof e?e:a,p[1]=o;for(var c=2;c<i;c++)p[c]=n[c];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6572:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={title:"WireGuard",keywords:["wireguard","vpn"],description:"WireGuard is a communication protocol and free and open-source software that implements encrypted virtual private networks, and was designed with the goals of ease of use, high speed performance, and low attack surface.",tags:["vpn"]},p="WireGuard",o={unversionedId:"guides/wireguard",id:"guides/wireguard",title:"WireGuard",description:"WireGuard is a communication protocol and free and open-source software that implements encrypted virtual private networks, and was designed with the goals of ease of use, high speed performance, and low attack surface.",source:"@site/docs/guides/wireguard.md",sourceDirName:"guides",slug:"/guides/wireguard",permalink:"/guides/wireguard",draft:!1,editUrl:"https://github.com/elmasy-com/docs.elmasy.com/tree/main/docs/guides/wireguard.md",tags:[{label:"vpn",permalink:"/tags/vpn"}],version:"current",frontMatter:{title:"WireGuard",keywords:["wireguard","vpn"],description:"WireGuard is a communication protocol and free and open-source software that implements encrypted virtual private networks, and was designed with the goals of ease of use, high speed performance, and low attack surface.",tags:["vpn"]},sidebar:"docSidebar",previous:{title:"Uptime Kuma",permalink:"/guides/uptimekuma"}},l={},c=[{value:"Server",id:"server",level:2},{value:"Setup",id:"setup",level:3},{value:"Add peer",id:"add-peer",level:3},{value:"Client",id:"client",level:2},{value:"Gateway",id:"gateway",level:2},{value:"nftable",id:"nftable",level:3},{value:"Forwarding",id:"forwarding",level:3}],u={toc:c},s="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(s,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"wireguard"},"WireGuard"),(0,a.kt)("h2",{id:"server"},"Server"),(0,a.kt)("p",null,"Create WireGuard server."),(0,a.kt)("h3",{id:"setup"},"Setup"),(0,a.kt)("p",null,"Set temporary permission for new files:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"umask 077\n")),(0,a.kt)("p",null,"Create the keys:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"wg genkey > /etc/wireguard/privkey\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"wg pubkey < /etc/wireguard/privkey > /etc/wireguard/pubkey\n")),(0,a.kt)("p",null,"Create the config file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"nano /etc/wireguard/wg0.conf\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ini"},"[Interface]\nAddress = 10.10.10.1/24\nListenPort = 51820\nSaveConfig = True\nPrivateKey = ...\n")),(0,a.kt)("p",null,"Start:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"wg-quick up wg0\n")),(0,a.kt)("p",null,"Enable:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl enable wg-quick@wg0\n")),(0,a.kt)("h3",{id:"add-peer"},"Add peer"),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Stop WireGuard before editing ",(0,a.kt)("inlineCode",{parentName:"p"},"wg0.conf"),"!")),(0,a.kt)("p",null,"Append to ",(0,a.kt)("inlineCode",{parentName:"p"},"wg0.conf"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"nano /etc/wireguard/wg0.conf\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[Peer]\nAllowedIPs = 10.10.10.2/32\nPublicKey = ...\nPresharedKey = ...\n")),(0,a.kt)("h2",{id:"client"},"Client"),(0,a.kt)("p",null,"Configure WireGuard client."),(0,a.kt)("p",null,"Set temporary permission for new files:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"umask 077\n")),(0,a.kt)("p",null,"Create the keys:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"wg genkey > /etc/wireguard/privkey\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"wg pubkey < /etc/wireguard/privkey > /etc/wireguard/pubkey\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"wg genpsk > /etc/wireguard/psk\n")),(0,a.kt)("p",null,"Create the config file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"nano /etc/wireguard/wg0.conf\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ini"},"[Interface]\nAddress = 10.10.10.2/32\nPrivateKey = ...\n\n[Peer]\nEndpoint = X.X.X.X:51820\nAllowedIPs = 10.10.10.0/24\nPublicKey = ...\nPreSharedKey = ...\nPersistentKeepalive = 20\n")),(0,a.kt)("h2",{id:"gateway"},"Gateway"),(0,a.kt)("p",null,"Use WireGuard server as gateway."),(0,a.kt)("h3",{id:"nftable"},"nftable"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"define WAN_IF   = eth0\ndefine WG_NET   = 10.10.10.0/24\ndefine WG_IF    = wg0\n\ntable nat {\n\n        chain prerouting {\n                type nat hook prerouting priority -100; policy accept;\n                #tcp dport 8080 iif $WAN_IF dnat to 10.10.10.2:8080\n        }\n\n        chain postrouting {\n                type nat hook postrouting priority 100; policy accept;\n                ip saddr $WG_NET oif $WAN_IF masquerade\n        }\n}\n\ntable inet filter {\n\n        chain input_wan {\n                tcp dport 22 accept\n                udp dport 51820 accept\n                icmp type echo-request limit rate 5/second accept\n                icmpv6 type { nd-neighbor-solicit, nd-router-advert, nd-neighbor-advert } accept\n                icmpv6 type echo-request limit rate 5/second accept\n        }\n\n        chain input_wg {\n                accept\n        }\n\n        chain input {\n                type filter hook input priority 0; policy drop;\n                ct state vmap { established : accept, related : accept, invalid : drop }\n                iifname vmap { lo : accept, $WAN_IF : jump input_wan, $WG_IF : jump input_wg }\n                reject\n        }\n\n        chain forward {\n                type filter hook forward priority 0; policy drop;\n                ct state vmap { established : accept, related : accept, invalid : drop }\n                iif $WG_IF oif $WAN_IF accept\n                iif $WAN_IF oif $WG_IF accept\n                iif $WG_IF oif $WG_IF accept\n\n        }\n\n        chain output {\n                type filter hook output priority 0;\n        }\n}\n")),(0,a.kt)("h3",{id:"forwarding"},"Forwarding"),(0,a.kt)("p",null,"Enable IP forwarding:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'echo "net.ipv6.conf.all.forwarding = 1" >> /etc/sysctl.conf\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sysctl -p\n")))}d.isMDXComponent=!0}}]);